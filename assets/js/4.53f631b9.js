(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{154:function(n,e,t){"use strict";t.r(e);var l=t(0),a=Object(l.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var n=this.$createElement,e=this._self._c||n;return e("div",{staticClass:"content"},[e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Event = {\n    //页面加载完成后\n    readyEvent: function(fn) {\n        if (fn === null) {\n            fn = document;\n        }\n        var oldonload = window.onload;\n        if (typeof window.onload != 'function') {\n            window.onload = fn;\n        } else {\n            window.onload = function() {\n                oldonload();\n                fn();\n            };\n        }\n    },\n    //视能力分别使用 demo0 || demo1 || IE 方式来绑定事件 \n    //参数：操作的元素，事件名称，事件处理程序 \n    addEvent: function(element, type, handler) {\n        if (element.addEventListener) { //事件类型、需要执行的函数、是否捕捉   \n            element.addEventListener(type, handler, false);\n        } else if (element.attachEvent) {\n            element.attachEvent('on' + type, function() {\n                handler.call(element);\n            });\n        } else {\n            element['on' + type] = handler;\n        }\n    },\n    //移除事件 \n    removeEvent: function(element, type, handler) {\n        if (element.removeEventListener) {\n            element.removeEventListener(type, handler, false);\n        } else if (element.datachEvent) {\n            element.datachEvent('on' + type, handler);\n        } else {\n            element['on' + type] = null;\n        }\n    },\n    //阻止事件（主要是事件冒泡，因为IE不支持事件捕获） \n    stopPropagation: function(ev) {\n        if (ev.stopPropagation) {\n            ev.stopPropagation();\n        } else {\n            ev.cancelBubble = true;\n        }\n    },\n    //取消事件的默认行为\n    preventDefault: function(event) {\n        if (event.preventDefault) {\n            event.preventDefault();\n        } else {\n            event.returnValue = false;\n        }\n    },\n    //获取事件目标 \n    getTarget: function(event) {\n        return event.target || event.srcElemnt;\n    },\n    //获取event对象的引用，取到事件的所有信息，确保随时能使用event； \n    getEvent: function(e) {\n        var ev = e || window.event;\n        if (!ev) {\n            var c = this.getEvent.caller;\n            while (c) {\n                ev = c.argument[0];\n                if (ev && Event == ev.constructor) {\n                    break;\n                }\n                c = c.caller;\n            }\n        }\n        return ev;\n    }\n};\n")])])])])}],!1,null,null,null);e.default=a.exports}}]);